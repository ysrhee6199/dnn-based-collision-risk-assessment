//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: BEV_image.cpp
//
// MATLAB Coder version            : 5.6
// C/C++ source code generated on  : 11-Jun-2024 00:27:43
//

// Include Files
#include "BEV_image.h"
#include "BEV_image_data.h"
#include "BEV_image_initialize.h"
#include "CTRV_MODEL.h"
#include "CV_MODEL.h"
#include "I_lat.h"
#include "Interacting.h"
#include "Mixing.h"
#include "TLC.h"
#include "find.h"
#include "inpolygon.h"
#include "isequal.h"
#include "linspace.h"
#include "meshgrid.h"
#include "minOrMax.h"
#include "norm.h"
#include "rt_nonfinite.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Variable Definitions
static bool out_Prob_ctrv_not_empty;

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

//
// Arguments    : const double Chassis[11]
//                const double Traffic[576]
//                const double Lane[10]
//                double AEB_in
//                unsigned char b_BEV_image[275598]
// Return Type  : void
//
void BEV_image(const double Chassis[11], const double Traffic[576],
               const double Lane[10], double, unsigned char b_BEV_image[275598])
{
  static const double RANGE_I_LAT_RANGE[255]{-0.2,
                                             -0.1952755905511811,
                                             -0.19055118110236222,
                                             -0.18582677165354333,
                                             -0.18110236220472442,
                                             -0.17637795275590551,
                                             -0.17165354330708663,
                                             -0.16692913385826774,
                                             -0.16220472440944883,
                                             -0.15748031496062992,
                                             -0.15275590551181104,
                                             -0.14803149606299215,
                                             -0.14330708661417324,
                                             -0.13858267716535433,
                                             -0.13385826771653545,
                                             -0.12913385826771656,
                                             -0.12440944881889765,
                                             -0.11968503937007875,
                                             -0.11496062992125985,
                                             -0.11023622047244096,
                                             -0.10551181102362206,
                                             -0.10078740157480316,
                                             -0.096062992125984265,
                                             -0.091338582677165367,
                                             -0.086614173228346469,
                                             -0.081889763779527572,
                                             -0.077165354330708674,
                                             -0.072440944881889791,
                                             -0.067716535433070879,
                                             -0.062992125984251968,
                                             -0.058267716535433084,
                                             -0.0535433070866142,
                                             -0.048818897637795289,
                                             -0.044094488188976377,
                                             -0.039370078740157494,
                                             -0.03464566929133861,
                                             -0.0299212598425197,
                                             -0.025196850393700787,
                                             -0.020472440944881903,
                                             -0.01574803149606302,
                                             -0.011023622047244108,
                                             -0.0062992125984251968,
                                             -0.0015748031496063131,
                                             0.0031496062992125706,
                                             0.0078740157480314821,
                                             0.012598425196850394,
                                             0.017322834645669277,
                                             0.022047244094488161,
                                             0.026771653543307072,
                                             0.031496062992125984,
                                             0.036220472440944868,
                                             0.040944881889763751,
                                             0.045669291338582663,
                                             0.050393700787401574,
                                             0.05511811023622043,
                                             0.059842519685039341,
                                             0.064566929133858253,
                                             0.069291338582677164,
                                             0.074015748031496076,
                                             0.078740157480314932,
                                             0.083464566929133843,
                                             0.088188976377952755,
                                             0.092913385826771611,
                                             0.097637795275590522,
                                             0.10236220472440943,
                                             0.10708661417322834,
                                             0.11181102362204726,
                                             0.11653543307086611,
                                             0.12125984251968502,
                                             0.12598425196850394,
                                             0.13070866141732279,
                                             0.1354330708661417,
                                             0.14015748031496061,
                                             0.14488188976377953,
                                             0.14960629921259844,
                                             0.15433070866141729,
                                             0.1590551181102362,
                                             0.16377952755905512,
                                             0.16850393700787397,
                                             0.17322834645669288,
                                             0.17795275590551179,
                                             0.18267716535433071,
                                             0.18740157480314962,
                                             0.19212598425196847,
                                             0.19685039370078738,
                                             0.2015748031496063,
                                             0.20629921259842515,
                                             0.21102362204724406,
                                             0.21574803149606298,
                                             0.22047244094488189,
                                             0.2251968503937008,
                                             0.22992125984251965,
                                             0.23464566929133857,
                                             0.23937007874015748,
                                             0.24409448818897633,
                                             0.24881889763779524,
                                             0.25354330708661416,
                                             0.25826771653543307,
                                             0.262992125984252,
                                             0.26771653543307083,
                                             0.27244094488188975,
                                             0.27716535433070866,
                                             0.28188976377952751,
                                             0.28661417322834642,
                                             0.29133858267716534,
                                             0.29606299212598425,
                                             0.30078740157480316,
                                             0.30551181102362207,
                                             0.31023622047244087,
                                             0.31496062992125978,
                                             0.31968503937007869,
                                             0.32440944881889761,
                                             0.32913385826771652,
                                             0.33385826771653543,
                                             0.33858267716535434,
                                             0.34330708661417325,
                                             0.34803149606299216,
                                             0.35275590551181096,
                                             0.35748031496062987,
                                             0.36220472440944879,
                                             0.3669291338582677,
                                             0.37165354330708661,
                                             0.37637795275590552,
                                             0.38110236220472443,
                                             0.38582677165354323,
                                             0.39055118110236214,
                                             0.39527559055118106,
                                             0.39999999999999997,
                                             0.40472440944881888,
                                             0.40944881889763779,
                                             0.4141732283464567,
                                             0.41889763779527561,
                                             0.42362204724409452,
                                             0.42834645669291332,
                                             0.43307086614173224,
                                             0.43779527559055115,
                                             0.44251968503937006,
                                             0.44724409448818897,
                                             0.45196850393700788,
                                             0.45669291338582679,
                                             0.46141732283464559,
                                             0.4661417322834645,
                                             0.47086614173228342,
                                             0.47559055118110233,
                                             0.48031496062992124,
                                             0.48503937007874015,
                                             0.48976377952755906,
                                             0.494488188976378,
                                             0.49921259842519689,
                                             0.50393700787401574,
                                             0.50866141732283454,
                                             0.51338582677165356,
                                             0.51811023622047236,
                                             0.52283464566929139,
                                             0.52755905511811019,
                                             0.53228346456692921,
                                             0.537007874015748,
                                             0.54173228346456681,
                                             0.54645669291338583,
                                             0.55118110236220463,
                                             0.55590551181102366,
                                             0.56062992125984246,
                                             0.56535433070866148,
                                             0.57007874015748028,
                                             0.5748031496062993,
                                             0.5795275590551181,
                                             0.5842519685039369,
                                             0.58897637795275593,
                                             0.59370078740157473,
                                             0.59842519685039375,
                                             0.60314960629921255,
                                             0.60787401574803157,
                                             0.61259842519685037,
                                             0.61732283464566917,
                                             0.62204724409448819,
                                             0.626771653543307,
                                             0.631496062992126,
                                             0.63622047244094482,
                                             0.64094488188976384,
                                             0.64566929133858264,
                                             0.65039370078740166,
                                             0.65511811023622046,
                                             0.65984251968503926,
                                             0.66456692913385829,
                                             0.66929133858267709,
                                             0.67401574803149611,
                                             0.67874015748031491,
                                             0.68346456692913393,
                                             0.68818897637795273,
                                             0.69291338582677153,
                                             0.69763779527559056,
                                             0.70236220472440936,
                                             0.70708661417322838,
                                             0.71181102362204718,
                                             0.7165354330708662,
                                             0.721259842519685,
                                             0.725984251968504,
                                             0.73070866141732282,
                                             0.73543307086614162,
                                             0.74015748031496065,
                                             0.74488188976377945,
                                             0.74960629921259847,
                                             0.75433070866141727,
                                             0.75905511811023629,
                                             0.76377952755905509,
                                             0.76850393700787389,
                                             0.77322834645669292,
                                             0.77795275590551172,
                                             0.78267716535433074,
                                             0.78740157480314954,
                                             0.79212598425196856,
                                             0.79685039370078736,
                                             0.80157480314960639,
                                             0.80629921259842519,
                                             0.81102362204724421,
                                             0.815748031496063,
                                             0.82047244094488181,
                                             0.82519685039370083,
                                             0.82992125984251963,
                                             0.83464566929133865,
                                             0.83937007874015745,
                                             0.84409448818897648,
                                             0.84881889763779528,
                                             0.8535433070866143,
                                             0.8582677165354331,
                                             0.8629921259842519,
                                             0.86771653543307092,
                                             0.87244094488188972,
                                             0.87716535433070875,
                                             0.88188976377952755,
                                             0.88661417322834657,
                                             0.89133858267716537,
                                             0.89606299212598439,
                                             0.90078740157480319,
                                             0.905511811023622,
                                             0.910236220472441,
                                             0.91496062992125982,
                                             0.91968503937007884,
                                             0.92440944881889764,
                                             0.92913385826771666,
                                             0.93385826771653546,
                                             0.93858267716535426,
                                             0.94330708661417328,
                                             0.94803149606299209,
                                             0.95275590551181111,
                                             0.95748031496062991,
                                             0.96220472440944893,
                                             0.96692913385826773,
                                             0.97165354330708653,
                                             0.97637795275590555,
                                             0.98110236220472435,
                                             0.98582677165354338,
                                             0.99055118110236218,
                                             0.9952755905511812,
                                             1.0};
  static const double b[251]{15625.0,
                             15252.992000000002,
                             14886.936000000003,
                             14526.784000000003,
                             14172.488000000005,
                             13824.0,
                             13481.272,
                             13144.256000000001,
                             12812.904000000004,
                             12487.168000000005,
                             12167.0,
                             11852.352,
                             11543.176000000003,
                             11239.424000000003,
                             10941.048000000004,
                             10648.0,
                             10360.232,
                             10077.696000000002,
                             9800.3440000000028,
                             9528.1280000000042,
                             9261.0,
                             8998.912,
                             8741.8160000000025,
                             8489.6640000000025,
                             8242.4080000000031,
                             8000.0,
                             7762.3920000000007,
                             7529.5360000000019,
                             7301.3840000000027,
                             7077.8880000000026,
                             6859.0,
                             6644.6720000000005,
                             6434.8560000000016,
                             6229.5040000000026,
                             6028.5679999999993,
                             5832.0,
                             5639.752,
                             5451.7760000000017,
                             5268.0240000000022,
                             5088.4479999999994,
                             4913.0,
                             4741.6320000000005,
                             4574.2960000000012,
                             4410.9440000000013,
                             4251.5279999999993,
                             4096.0,
                             3944.3120000000004,
                             3796.4160000000011,
                             3652.264,
                             3511.8080000000009,
                             3375.0,
                             3241.7920000000004,
                             3112.1360000000009,
                             2985.9840000000004,
                             2863.2880000000005,
                             2744.0,
                             2628.072,
                             2515.456000000001,
                             2406.1040000000003,
                             2299.9680000000008,
                             2197.0,
                             2097.1520000000005,
                             2000.3760000000007,
                             1906.6240000000003,
                             1815.8480000000004,
                             1728.0,
                             1643.0320000000002,
                             1560.8960000000006,
                             1481.544,
                             1404.9280000000003,
                             1331.0,
                             1259.7120000000002,
                             1191.0160000000005,
                             1124.864,
                             1061.2080000000003,
                             1000.0,
                             941.19200000000023,
                             884.73600000000033,
                             830.58400000000006,
                             778.68800000000033,
                             729.0,
                             681.47200000000021,
                             636.05599999999993,
                             592.70400000000006,
                             551.36800000000017,
                             512.0,
                             474.55200000000013,
                             438.97600000000011,
                             405.22400000000005,
                             373.24800000000005,
                             343.0,
                             314.43200000000013,
                             287.49600000000009,
                             262.14400000000006,
                             238.32800000000003,
                             216.0,
                             195.11200000000008,
                             175.61600000000004,
                             157.46400000000003,
                             140.608,
                             125.0,
                             110.59200000000004,
                             97.336000000000041,
                             85.184000000000026,
                             74.088000000000008,
                             64.0,
                             54.872000000000014,
                             46.656000000000006,
                             39.304000000000016,
                             32.768000000000008,
                             27.0,
                             21.952000000000005,
                             17.576,
                             13.824000000000005,
                             10.648000000000003,
                             8.0,
                             5.8320000000000007,
                             4.096000000000001,
                             2.7440000000000007,
                             1.7280000000000006,
                             1.0,
                             0.51200000000000012,
                             0.21600000000000008,
                             0.064000000000000015,
                             0.0080000000000000019,
                             0.0,
                             -0.0080000000000000019,
                             -0.064000000000000015,
                             -0.21600000000000008,
                             -0.51200000000000012,
                             -1.0,
                             -1.7280000000000006,
                             -2.7440000000000007,
                             -4.096000000000001,
                             -5.8320000000000007,
                             -8.0,
                             -10.648000000000003,
                             -13.824000000000005,
                             -17.576,
                             -21.952000000000005,
                             -27.0,
                             -32.768000000000008,
                             -39.304000000000016,
                             -46.656000000000006,
                             -54.872000000000014,
                             -64.0,
                             -74.088000000000008,
                             -85.184000000000026,
                             -97.336000000000041,
                             -110.59200000000004,
                             -125.0,
                             -140.608,
                             -157.46400000000003,
                             -175.61600000000004,
                             -195.11200000000008,
                             -216.0,
                             -238.32800000000003,
                             -262.14400000000006,
                             -287.49600000000009,
                             -314.43200000000013,
                             -343.0,
                             -373.24800000000005,
                             -405.22400000000005,
                             -438.97600000000011,
                             -474.55200000000013,
                             -512.0,
                             -551.36800000000017,
                             -592.70400000000006,
                             -636.05599999999993,
                             -681.47200000000021,
                             -729.0,
                             -778.68800000000033,
                             -830.58400000000006,
                             -884.73600000000033,
                             -941.19200000000023,
                             -1000.0,
                             -1061.2080000000003,
                             -1124.864,
                             -1191.0160000000005,
                             -1259.7120000000002,
                             -1331.0,
                             -1404.9280000000003,
                             -1481.544,
                             -1560.8960000000006,
                             -1643.0320000000002,
                             -1728.0,
                             -1815.8480000000004,
                             -1906.6240000000003,
                             -2000.3760000000007,
                             -2097.1520000000005,
                             -2197.0,
                             -2299.9680000000008,
                             -2406.1040000000003,
                             -2515.456000000001,
                             -2628.072,
                             -2744.0,
                             -2863.2880000000005,
                             -2985.9840000000004,
                             -3112.1360000000009,
                             -3241.7920000000004,
                             -3375.0,
                             -3511.8080000000009,
                             -3652.264,
                             -3796.4160000000011,
                             -3944.3120000000004,
                             -4096.0,
                             -4251.5279999999993,
                             -4410.9440000000013,
                             -4574.2960000000012,
                             -4741.6320000000005,
                             -4913.0,
                             -5088.4479999999994,
                             -5268.0240000000022,
                             -5451.7760000000017,
                             -5639.752,
                             -5832.0,
                             -6028.5679999999993,
                             -6229.5040000000026,
                             -6434.8560000000016,
                             -6644.6720000000005,
                             -6859.0,
                             -7077.8880000000026,
                             -7301.3840000000027,
                             -7529.5360000000019,
                             -7762.3920000000007,
                             -8000.0,
                             -8242.4080000000031,
                             -8489.6640000000025,
                             -8741.8160000000025,
                             -8998.912,
                             -9261.0,
                             -9528.1280000000042,
                             -9800.3440000000028,
                             -10077.696000000002,
                             -10360.232,
                             -10648.0,
                             -10941.048000000004,
                             -11239.424000000003,
                             -11543.176000000003,
                             -11852.352,
                             -12167.0,
                             -12487.168000000005,
                             -12812.904000000004,
                             -13144.256000000001,
                             -13481.272,
                             -13824.0,
                             -14172.488000000005,
                             -14526.784000000003,
                             -14886.936000000003,
                             -15252.992000000002,
                             -15625.0};
  static const double b_b[251]{625.0,
                               615.04000000000008,
                               605.16000000000008,
                               595.36000000000013,
                               585.6400000000001,
                               576.0,
                               566.44,
                               556.96,
                               547.56000000000006,
                               538.24000000000012,
                               529.0,
                               519.84,
                               510.76000000000005,
                               501.7600000000001,
                               492.84000000000015,
                               484.0,
                               475.24,
                               466.56000000000006,
                               457.96000000000009,
                               449.44000000000011,
                               441.0,
                               432.64000000000004,
                               424.36000000000007,
                               416.16000000000008,
                               408.04000000000013,
                               400.0,
                               392.04,
                               384.16000000000008,
                               376.36000000000007,
                               368.6400000000001,
                               361.0,
                               353.44000000000005,
                               345.96000000000004,
                               338.56000000000006,
                               331.23999999999995,
                               324.0,
                               316.84000000000003,
                               309.76000000000005,
                               302.76000000000005,
                               295.84,
                               289.0,
                               282.24,
                               275.56000000000006,
                               268.96000000000009,
                               262.44,
                               256.0,
                               249.64000000000001,
                               243.36000000000004,
                               237.16000000000003,
                               231.04000000000002,
                               225.0,
                               219.04000000000002,
                               213.16000000000005,
                               207.36,
                               201.64000000000004,
                               196.0,
                               190.44000000000003,
                               184.96000000000004,
                               179.56,
                               174.24000000000004,
                               169.0,
                               163.84000000000003,
                               158.76000000000005,
                               153.76000000000002,
                               148.84000000000003,
                               144.0,
                               139.24,
                               134.56000000000003,
                               129.96,
                               125.44000000000003,
                               121.0,
                               116.64000000000001,
                               112.36000000000003,
                               108.16000000000001,
                               104.04000000000002,
                               100.0,
                               96.04000000000002,
                               92.160000000000025,
                               88.360000000000014,
                               84.640000000000015,
                               81.0,
                               77.440000000000012,
                               73.96,
                               70.56,
                               67.240000000000023,
                               64.0,
                               60.840000000000011,
                               57.760000000000005,
                               54.760000000000005,
                               51.84,
                               49.0,
                               46.240000000000009,
                               43.560000000000009,
                               40.960000000000008,
                               38.440000000000005,
                               36.0,
                               33.640000000000008,
                               31.360000000000007,
                               29.160000000000004,
                               27.040000000000003,
                               25.0,
                               23.040000000000006,
                               21.160000000000004,
                               19.360000000000003,
                               17.64,
                               16.0,
                               14.440000000000001,
                               12.96,
                               11.560000000000002,
                               10.240000000000002,
                               9.0,
                               7.8400000000000016,
                               6.7600000000000007,
                               5.7600000000000016,
                               4.8400000000000007,
                               4.0,
                               3.24,
                               2.5600000000000005,
                               1.9600000000000004,
                               1.4400000000000004,
                               1.0,
                               0.64000000000000012,
                               0.3600000000000001,
                               0.16000000000000003,
                               0.040000000000000008,
                               0.0,
                               0.040000000000000008,
                               0.16000000000000003,
                               0.3600000000000001,
                               0.64000000000000012,
                               1.0,
                               1.4400000000000004,
                               1.9600000000000004,
                               2.5600000000000005,
                               3.24,
                               4.0,
                               4.8400000000000007,
                               5.7600000000000016,
                               6.7600000000000007,
                               7.8400000000000016,
                               9.0,
                               10.240000000000002,
                               11.560000000000002,
                               12.96,
                               14.440000000000001,
                               16.0,
                               17.64,
                               19.360000000000003,
                               21.160000000000004,
                               23.040000000000006,
                               25.0,
                               27.040000000000003,
                               29.160000000000004,
                               31.360000000000007,
                               33.640000000000008,
                               36.0,
                               38.440000000000005,
                               40.960000000000008,
                               43.560000000000009,
                               46.240000000000009,
                               49.0,
                               51.84,
                               54.760000000000005,
                               57.760000000000005,
                               60.840000000000011,
                               64.0,
                               67.240000000000023,
                               70.56,
                               73.96,
                               77.440000000000012,
                               81.0,
                               84.640000000000015,
                               88.360000000000014,
                               92.160000000000025,
                               96.04000000000002,
                               100.0,
                               104.04000000000002,
                               108.16000000000001,
                               112.36000000000003,
                               116.64000000000001,
                               121.0,
                               125.44000000000003,
                               129.96,
                               134.56000000000003,
                               139.24,
                               144.0,
                               148.84000000000003,
                               153.76000000000002,
                               158.76000000000005,
                               163.84000000000003,
                               169.0,
                               174.24000000000004,
                               179.56,
                               184.96000000000004,
                               190.44000000000003,
                               196.0,
                               201.64000000000004,
                               207.36,
                               213.16000000000005,
                               219.04000000000002,
                               225.0,
                               231.04000000000002,
                               237.16000000000003,
                               243.36000000000004,
                               249.64000000000001,
                               256.0,
                               262.44,
                               268.96000000000009,
                               275.56000000000006,
                               282.24,
                               289.0,
                               295.84,
                               302.76000000000005,
                               309.76000000000005,
                               316.84000000000003,
                               324.0,
                               331.23999999999995,
                               338.56000000000006,
                               345.96000000000004,
                               353.44000000000005,
                               361.0,
                               368.6400000000001,
                               376.36000000000007,
                               384.16000000000008,
                               392.04,
                               400.0,
                               408.04000000000013,
                               416.16000000000008,
                               424.36000000000007,
                               432.64000000000004,
                               441.0,
                               449.44000000000011,
                               457.96000000000009,
                               466.56000000000006,
                               475.24,
                               484.0,
                               492.84000000000015,
                               501.7600000000001,
                               510.76000000000005,
                               519.84,
                               529.0,
                               538.24000000000012,
                               547.56000000000006,
                               556.96,
                               566.44,
                               576.0,
                               585.6400000000001,
                               595.36000000000013,
                               605.16000000000008,
                               615.04000000000008,
                               625.0};
  static const double b_dv[251]{25.0,
                                24.8,
                                24.6,
                                24.400000000000002,
                                24.200000000000003,
                                24.0,
                                23.8,
                                23.6,
                                23.400000000000002,
                                23.200000000000003,
                                23.0,
                                22.8,
                                22.6,
                                22.400000000000002,
                                22.200000000000003,
                                22.0,
                                21.8,
                                21.6,
                                21.400000000000002,
                                21.200000000000003,
                                21.0,
                                20.8,
                                20.6,
                                20.400000000000002,
                                20.200000000000003,
                                20.0,
                                19.8,
                                19.6,
                                19.400000000000002,
                                19.200000000000003,
                                19.0,
                                18.8,
                                18.6,
                                18.400000000000002,
                                18.2,
                                18.0,
                                17.8,
                                17.6,
                                17.400000000000002,
                                17.2,
                                17.0,
                                16.8,
                                16.6,
                                16.400000000000002,
                                16.2,
                                16.0,
                                15.8,
                                15.600000000000001,
                                15.4,
                                15.200000000000001,
                                15.0,
                                14.8,
                                14.600000000000001,
                                14.4,
                                14.200000000000001,
                                14.0,
                                13.8,
                                13.600000000000001,
                                13.4,
                                13.200000000000001,
                                13.0,
                                12.8,
                                12.600000000000001,
                                12.4,
                                12.200000000000001,
                                12.0,
                                11.8,
                                11.600000000000001,
                                11.4,
                                11.200000000000001,
                                11.0,
                                10.8,
                                10.600000000000001,
                                10.4,
                                10.200000000000001,
                                10.0,
                                9.8,
                                9.6000000000000014,
                                9.4,
                                9.2000000000000011,
                                9.0,
                                8.8,
                                8.6,
                                8.4,
                                8.2000000000000011,
                                8.0,
                                7.8000000000000007,
                                7.6000000000000005,
                                7.4,
                                7.2,
                                7.0,
                                6.8000000000000007,
                                6.6000000000000005,
                                6.4,
                                6.2,
                                6.0,
                                5.8000000000000007,
                                5.6000000000000005,
                                5.4,
                                5.2,
                                5.0,
                                4.8000000000000007,
                                4.6000000000000005,
                                4.4,
                                4.2,
                                4.0,
                                3.8000000000000003,
                                3.6,
                                3.4000000000000004,
                                3.2,
                                3.0,
                                2.8000000000000003,
                                2.6,
                                2.4000000000000004,
                                2.2,
                                2.0,
                                1.8,
                                1.6,
                                1.4000000000000001,
                                1.2000000000000002,
                                1.0,
                                0.8,
                                0.60000000000000009,
                                0.4,
                                0.2,
                                0.0,
                                -0.2,
                                -0.4,
                                -0.60000000000000009,
                                -0.8,
                                -1.0,
                                -1.2000000000000002,
                                -1.4000000000000001,
                                -1.6,
                                -1.8,
                                -2.0,
                                -2.2,
                                -2.4000000000000004,
                                -2.6,
                                -2.8000000000000003,
                                -3.0,
                                -3.2,
                                -3.4000000000000004,
                                -3.6,
                                -3.8000000000000003,
                                -4.0,
                                -4.2,
                                -4.4,
                                -4.6000000000000005,
                                -4.8000000000000007,
                                -5.0,
                                -5.2,
                                -5.4,
                                -5.6000000000000005,
                                -5.8000000000000007,
                                -6.0,
                                -6.2,
                                -6.4,
                                -6.6000000000000005,
                                -6.8000000000000007,
                                -7.0,
                                -7.2,
                                -7.4,
                                -7.6000000000000005,
                                -7.8000000000000007,
                                -8.0,
                                -8.2000000000000011,
                                -8.4,
                                -8.6,
                                -8.8,
                                -9.0,
                                -9.2000000000000011,
                                -9.4,
                                -9.6000000000000014,
                                -9.8,
                                -10.0,
                                -10.200000000000001,
                                -10.4,
                                -10.600000000000001,
                                -10.8,
                                -11.0,
                                -11.200000000000001,
                                -11.4,
                                -11.600000000000001,
                                -11.8,
                                -12.0,
                                -12.200000000000001,
                                -12.4,
                                -12.600000000000001,
                                -12.8,
                                -13.0,
                                -13.200000000000001,
                                -13.4,
                                -13.600000000000001,
                                -13.8,
                                -14.0,
                                -14.200000000000001,
                                -14.4,
                                -14.600000000000001,
                                -14.8,
                                -15.0,
                                -15.200000000000001,
                                -15.4,
                                -15.600000000000001,
                                -15.8,
                                -16.0,
                                -16.2,
                                -16.400000000000002,
                                -16.6,
                                -16.8,
                                -17.0,
                                -17.2,
                                -17.400000000000002,
                                -17.6,
                                -17.8,
                                -18.0,
                                -18.2,
                                -18.400000000000002,
                                -18.6,
                                -18.8,
                                -19.0,
                                -19.200000000000003,
                                -19.400000000000002,
                                -19.6,
                                -19.8,
                                -20.0,
                                -20.200000000000003,
                                -20.400000000000002,
                                -20.6,
                                -20.8,
                                -21.0,
                                -21.200000000000003,
                                -21.400000000000002,
                                -21.6,
                                -21.8,
                                -22.0,
                                -22.200000000000003,
                                -22.400000000000002,
                                -22.6,
                                -22.8,
                                -23.0,
                                -23.200000000000003,
                                -23.400000000000002,
                                -23.6,
                                -23.8,
                                -24.0,
                                -24.200000000000003,
                                -24.400000000000002,
                                -24.6,
                                -24.8,
                                -25.0};
  static const double varargin_1[251]{25.0,
                                      24.8,
                                      24.6,
                                      24.400000000000002,
                                      24.200000000000003,
                                      24.0,
                                      23.8,
                                      23.6,
                                      23.400000000000002,
                                      23.200000000000003,
                                      23.0,
                                      22.8,
                                      22.6,
                                      22.400000000000002,
                                      22.200000000000003,
                                      22.0,
                                      21.8,
                                      21.6,
                                      21.400000000000002,
                                      21.200000000000003,
                                      21.0,
                                      20.8,
                                      20.6,
                                      20.400000000000002,
                                      20.200000000000003,
                                      20.0,
                                      19.8,
                                      19.6,
                                      19.400000000000002,
                                      19.200000000000003,
                                      19.0,
                                      18.8,
                                      18.6,
                                      18.400000000000002,
                                      18.2,
                                      18.0,
                                      17.8,
                                      17.6,
                                      17.400000000000002,
                                      17.2,
                                      17.0,
                                      16.8,
                                      16.6,
                                      16.400000000000002,
                                      16.2,
                                      16.0,
                                      15.8,
                                      15.600000000000001,
                                      15.4,
                                      15.200000000000001,
                                      15.0,
                                      14.8,
                                      14.600000000000001,
                                      14.4,
                                      14.200000000000001,
                                      14.0,
                                      13.8,
                                      13.600000000000001,
                                      13.4,
                                      13.200000000000001,
                                      13.0,
                                      12.8,
                                      12.600000000000001,
                                      12.4,
                                      12.200000000000001,
                                      12.0,
                                      11.8,
                                      11.600000000000001,
                                      11.4,
                                      11.200000000000001,
                                      11.0,
                                      10.8,
                                      10.600000000000001,
                                      10.4,
                                      10.200000000000001,
                                      10.0,
                                      9.8,
                                      9.6000000000000014,
                                      9.4,
                                      9.2000000000000011,
                                      9.0,
                                      8.8,
                                      8.6,
                                      8.4,
                                      8.2000000000000011,
                                      8.0,
                                      7.8000000000000007,
                                      7.6000000000000005,
                                      7.4,
                                      7.2,
                                      7.0,
                                      6.8000000000000007,
                                      6.6000000000000005,
                                      6.4,
                                      6.2,
                                      6.0,
                                      5.8000000000000007,
                                      5.6000000000000005,
                                      5.4,
                                      5.2,
                                      5.0,
                                      4.8000000000000007,
                                      4.6000000000000005,
                                      4.4,
                                      4.2,
                                      4.0,
                                      3.8000000000000003,
                                      3.6,
                                      3.4000000000000004,
                                      3.2,
                                      3.0,
                                      2.8000000000000003,
                                      2.6,
                                      2.4000000000000004,
                                      2.2,
                                      2.0,
                                      1.8,
                                      1.6,
                                      1.4000000000000001,
                                      1.2000000000000002,
                                      1.0,
                                      0.8,
                                      0.60000000000000009,
                                      0.4,
                                      0.2,
                                      0.0,
                                      -0.2,
                                      -0.4,
                                      -0.60000000000000009,
                                      -0.8,
                                      -1.0,
                                      -1.2000000000000002,
                                      -1.4000000000000001,
                                      -1.6,
                                      -1.8,
                                      -2.0,
                                      -2.2,
                                      -2.4000000000000004,
                                      -2.6,
                                      -2.8000000000000003,
                                      -3.0,
                                      -3.2,
                                      -3.4000000000000004,
                                      -3.6,
                                      -3.8000000000000003,
                                      -4.0,
                                      -4.2,
                                      -4.4,
                                      -4.6000000000000005,
                                      -4.8000000000000007,
                                      -5.0,
                                      -5.2,
                                      -5.4,
                                      -5.6000000000000005,
                                      -5.8000000000000007,
                                      -6.0,
                                      -6.2,
                                      -6.4,
                                      -6.6000000000000005,
                                      -6.8000000000000007,
                                      -7.0,
                                      -7.2,
                                      -7.4,
                                      -7.6000000000000005,
                                      -7.8000000000000007,
                                      -8.0,
                                      -8.2000000000000011,
                                      -8.4,
                                      -8.6,
                                      -8.8,
                                      -9.0,
                                      -9.2000000000000011,
                                      -9.4,
                                      -9.6000000000000014,
                                      -9.8,
                                      -10.0,
                                      -10.200000000000001,
                                      -10.4,
                                      -10.600000000000001,
                                      -10.8,
                                      -11.0,
                                      -11.200000000000001,
                                      -11.4,
                                      -11.600000000000001,
                                      -11.8,
                                      -12.0,
                                      -12.200000000000001,
                                      -12.4,
                                      -12.600000000000001,
                                      -12.8,
                                      -13.0,
                                      -13.200000000000001,
                                      -13.4,
                                      -13.600000000000001,
                                      -13.8,
                                      -14.0,
                                      -14.200000000000001,
                                      -14.4,
                                      -14.600000000000001,
                                      -14.8,
                                      -15.0,
                                      -15.200000000000001,
                                      -15.4,
                                      -15.600000000000001,
                                      -15.8,
                                      -16.0,
                                      -16.2,
                                      -16.400000000000002,
                                      -16.6,
                                      -16.8,
                                      -17.0,
                                      -17.2,
                                      -17.400000000000002,
                                      -17.6,
                                      -17.8,
                                      -18.0,
                                      -18.2,
                                      -18.400000000000002,
                                      -18.6,
                                      -18.8,
                                      -19.0,
                                      -19.200000000000003,
                                      -19.400000000000002,
                                      -19.6,
                                      -19.8,
                                      -20.0,
                                      -20.200000000000003,
                                      -20.400000000000002,
                                      -20.6,
                                      -20.8,
                                      -21.0,
                                      -21.200000000000003,
                                      -21.400000000000002,
                                      -21.6,
                                      -21.8,
                                      -22.0,
                                      -22.200000000000003,
                                      -22.400000000000002,
                                      -22.6,
                                      -22.8,
                                      -23.0,
                                      -23.200000000000003,
                                      -23.400000000000002,
                                      -23.6,
                                      -23.8,
                                      -24.0,
                                      -24.200000000000003,
                                      -24.400000000000002,
                                      -24.6,
                                      -24.8,
                                      -25.0};
  static const double b_varargin_1[61]{6.0,
                                       5.8000000000000007,
                                       5.6000000000000005,
                                       5.4,
                                       5.2,
                                       5.0,
                                       4.8000000000000007,
                                       4.6000000000000005,
                                       4.4,
                                       4.2,
                                       4.0,
                                       3.8000000000000003,
                                       3.6,
                                       3.4000000000000004,
                                       3.2,
                                       3.0,
                                       2.8000000000000003,
                                       2.6,
                                       2.4000000000000004,
                                       2.2,
                                       2.0,
                                       1.8,
                                       1.6,
                                       1.4000000000000001,
                                       1.2000000000000002,
                                       1.0,
                                       0.8,
                                       0.60000000000000009,
                                       0.4,
                                       0.2,
                                       0.0,
                                       -0.2,
                                       -0.4,
                                       -0.60000000000000009,
                                       -0.8,
                                       -1.0,
                                       -1.2000000000000002,
                                       -1.4000000000000001,
                                       -1.6,
                                       -1.8,
                                       -2.0,
                                       -2.2,
                                       -2.4000000000000004,
                                       -2.6,
                                       -2.8000000000000003,
                                       -3.0,
                                       -3.2,
                                       -3.4000000000000004,
                                       -3.6,
                                       -3.8000000000000003,
                                       -4.0,
                                       -4.2,
                                       -4.4,
                                       -4.6000000000000005,
                                       -4.8000000000000007,
                                       -5.0,
                                       -5.2,
                                       -5.4,
                                       -5.6000000000000005,
                                       -5.8000000000000007,
                                       -6.0};
  static double BEV_Window_out[275598];
  static double image[275598];
  static double State[32256];
  static double Tmp_State[32256];
  static double Rx[15311];
  static double Ry[15311];
  static double out_P_ctrv[1600];
  static double out_P_cv[1600];
  static double flag[64];
  static double out_Prob_ctrv[64];
  static double out_Prob_cv[64];
  static int ii_data[15311];
  static const short b_iv[5]{1000, 1000, 0, 0, 0};
  double X_pred[3200];
  double Training_data_data[1792];
  double old_P_ctrv[1600];
  double old_P_cv[1600];
  double P_ctrv_tmp[250];
  double P_cv_tmp[250];
  double xp1[100];
  double xp2[100];
  double xp3[100];
  double xp4[100];
  double yp1[100];
  double yp2[100];
  double yp3[100];
  double yp4[100];
  double TJ_Y[70];
  double old_Prob_ctrv[64];
  double old_Prob_cv[64];
  double old_flag[64];
  double P_ctrv_old[25];
  double P_cv_old[25];
  double laneInfoR[5];
  double tmp_target_x[5];
  double tmp_target_y[5];
  double x_cv[5];
  double x_ini[5];
  double Distance_to_Leftlane;
  double Distance_to_Rightlane;
  double EGO_CG2_FRONT_BUMPER;
  double Lane_Width;
  double Prob_cv_old;
  double X_AB;
  double Y_AB;
  double Y_FrontCenter_A_tmp;
  double c_ctrv;
  double d;
  double d1;
  double d2;
  double d3;
  double d4;
  double d5;
  double d6;
  double mu_cv;
  double target_vel_x;
  int jj_data[15311];
  int BEV_Window_out_tmp;
  int I_LAT_uint8;
  int Traffic_index;
  int i;
  int iindx;
  int out_P_ctrv_tmp;
  int pred_length;
  if (!isInitialized_BEV_image) {
    BEV_image_initialize();
  }
  // function
  // [BEV_image,State,out_Prob_ctrv,out_Prob_cv,out_P_ctrv,out_P_cv,flag] =
  // fcn(Chassis, Traffic, Lane,
  // AEB_in,old_State,old_Prob_ctrv,old_Prob_cv,old_P_ctrv,old_P_cv,old_flag)
  //  CarMaker data의 sample time
  //  p.145
  //
  //  l 564
  //
  //  l 454
  if (!out_Prob_ctrv_not_empty) {
    for (i = 0; i < 64; i++) {
      old_Prob_ctrv[i] = 0.8;
      old_Prob_cv[i] = 0.2;
      out_Prob_cv[i] = 0.2;
      out_Prob_ctrv[i] = 0.8;
    }
    out_Prob_ctrv_not_empty = true;
    // flag        = coder.nullcopy(zeros(15,1));
  } else {
    std::copy(&out_Prob_ctrv[0], &out_Prob_ctrv[64], &old_Prob_ctrv[0]);
    std::copy(&out_Prob_cv[0], &out_Prob_cv[64], &old_Prob_cv[0]);
    std::copy(&out_P_ctrv[0], &out_P_ctrv[1600], &old_P_ctrv[0]);
    std::copy(&out_P_cv[0], &out_P_cv[1600], &old_P_cv[0]);
    std::copy(&flag[0], &flag[64], &old_flag[0]);
  }
  //  Input Parameter
  //  Chassis
  // Sensor
  //  Traffic
  //  Lane
  //
  //  Switch
  //  BEV Window 생성 Parameter
  //  누적하는 궤적의 길이 (s)
  //  Image_Channel_1일 경우 아래 2개중 하나 선택
  //  Image X 축의 크기 (pixel)
  //  Image Y 축의 크기 (pixel)
  //  WHITE/BLACK
  for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 275598;
       BEV_Window_out_tmp++) {
    BEV_Window_out[BEV_Window_out_tmp] = 255.0;
    image[BEV_Window_out_tmp] = 255.0;
  }
  std::memset(&Tmp_State[0], 0, 32256U * sizeof(double));
  for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 64; BEV_Window_out_tmp++) {
    for (iindx = 0; iindx < 28; iindx++) {
      std::copy(
          &State[BEV_Window_out_tmp * 504 + iindx * 18],
          &State[static_cast<int>(
              static_cast<unsigned int>(BEV_Window_out_tmp * 504 + iindx * 18) +
              17U)],
          &Tmp_State[(BEV_Window_out_tmp * 504 + iindx * 18) + 1]);
    }
  }
  //
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  이 line 이후로는 코드 실행 전 수정할 필요 없음
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  Sample_Time = 0.01; % CarMaker data의 sample time
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  BEV Window Normalization Parameter
  //  m
  //  rad
  //  s
  //
  // maximum pixel of X
  // maximum pixel of Y
  // maximum pixel of X
  // minimum pixel of Y
  //  center (0,0)-> (imageX/2,imageY/2)
  //  gradient -(range of pixel)/(range of meter)  X
  //  gradient -(range of pixel)/(range of meter)  Y
  //  Threat Parameter
  // 상대차 최대감속도
  // 자차 최소감속도
  // 자차 최대가속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 최대가속도
  // 횡방향 최소감속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 마진
  // 무게중심에서 전륜까지의 거리
  // 차량 너비
  //  AddThreatMetricMultiTarget_Predict_Trajectory.m 의 Parameter
  //       [rad]              Global heading angle
  //       [m]                Global longitudinal position
  //       [m]                Global lateral position
  //       [m/s]              absolute velocity
  //       [m/s^2]
  //      [m/s]
  //  CLASS B
  //       [rad]                                            global 좌표계에서의
  //       heading angle [m] position = 뒷범퍼 중심 [m] [m/s] [m]
  //      [m]
  //      [m/s]
  //      [rad]
  //  Description
  //                       Class_B 에서 출력되는 최대 state 개수
  //                        Preprocessing 에서 추가될 state 개수
  //  Road
  //      [m]
  //      [1/m]
  //      [rad]
  //      [m]
  //  ROAD.PREPROCESSING.STATE_NUMBER                    =
  //  length(fieldnames(ROAD.PREPROCESSING)); Line
  //      [1/m^2]
  //      [1/m]
  //      [rad]
  //      [m]
  //      [1/m^2]
  //      [1/m]
  //  Initialization
  std::memset(&Training_data_data[0], 0, 1792U * sizeof(double));
  //  Traffic Coodinate Transform
  //   this part will be changed
  //  Fr0(global)
  //  wheel velocity
  //  Fr1(body fixed)
  EGO_CG2_FRONT_BUMPER = Chassis[8];
  //  Lane distance
  Distance_to_Leftlane = Lane[6];
  Distance_to_Rightlane = Lane[7];
  Lane_Width = std::abs(Lane[6]) + std::abs(Lane[7]);
  //  Generation Training data
  Prob_cv_old = std::cos(Chassis[0]);
  Y_FrontCenter_A_tmp = std::sin(Chassis[0]);
  d = Chassis[2];
  d1 = Chassis[1];
  target_vel_x = Chassis[5];
  d2 = Chassis[6];
  d3 = Chassis[10];
  d4 = Chassis[9];
  d5 = Chassis[0];
  for (Traffic_index = 0; Traffic_index < 64; Traffic_index++) {
    d6 = Traffic[9 * Traffic_index + 4];
    mu_cv = Traffic[9 * Traffic_index + 3];
    X_AB = Traffic[9 * Traffic_index + 1] -
           (EGO_CG2_FRONT_BUMPER * Prob_cv_old + d);
    Y_AB = Traffic[9 * Traffic_index] -
           (EGO_CG2_FRONT_BUMPER * Y_FrontCenter_A_tmp + d1);
    c_ctrv = (mu_cv * Prob_cv_old + d6 * Y_FrontCenter_A_tmp) - target_vel_x;
    d6 = (-mu_cv * Y_FrontCenter_A_tmp + d6 * Prob_cv_old) - d2;
    Training_data_data[28 * Traffic_index + 1] = d3;
    Training_data_data[28 * Traffic_index + 2] = d4;
    Training_data_data[28 * Traffic_index + 5] =
        X_AB * Prob_cv_old + Y_AB * Y_FrontCenter_A_tmp;
    Training_data_data[28 * Traffic_index + 6] =
        -X_AB * Y_FrontCenter_A_tmp + Y_AB * Prob_cv_old;
    Training_data_data[28 * Traffic_index + 7] = c_ctrv;
    Training_data_data[28 * Traffic_index + 8] = d6;
    Training_data_data[28 * Traffic_index + 9] =
        std::sqrt(c_ctrv * c_ctrv + d6 * d6);
    Training_data_data[28 * Traffic_index + 10] =
        Traffic[9 * Traffic_index + 2] - d5;
    Training_data_data[28 * Traffic_index + 3] = Traffic[9 * Traffic_index + 8];
    Training_data_data[28 * Traffic_index + 4] = Traffic[9 * Traffic_index + 7];
  }
  //  IMM-UKF
  std::memset(&P_ctrv_tmp[0], 0, 250U * sizeof(double));
  std::memset(&P_cv_tmp[0], 0, 250U * sizeof(double));
  std::memset(&X_pred[0], 0, 3200U * sizeof(double));
  //  [y x yaw v yawrate]
  // out_Prob_cv = 0.2 * ones(Traffic_Number,1);
  // out_Prob_ctrv = 0.8 * ones(Traffic_Number,1);
  // out_P_ctrv = zeros(5,5,Traffic_Number);
  // out_P_cv = zeros(5,5,Traffic_Number);
  //  ACC DEC ESL ESR ELCL ELCR ESS
  std::memset(&TJ_Y[0], 0, 70U * sizeof(double));
  //  TJ_ELCL=zeros(length(index_time),10);
  //  TJ_ELCR=zeros(length(index_time),10);
  //  TJ_DEC=zeros(length(index_time),10);
  //  TJ_ACC=zeros(length(index_time),10);
  //  for index_time = 1:length(sim_time)
  //  Fr1(body fixed)
  //  ACC Y
  //  DEC Y
  //  ESL X
  //  ESL Y
  //  ELCL X
  //  ELCL Y
  //  ESS X
  //  ESS Y
  //  ACC Y
  for (i = 0; i < 10; i++) {
    EGO_CG2_FRONT_BUMPER = (static_cast<double>(i) + 1.0) * 0.2;
    // ESR
    // ELCR
    d = 0.55704230082163364 *
            std::sin(1.6409734010875878 * EGO_CG2_FRONT_BUMPER) -
        0.91409159892893144 * EGO_CG2_FRONT_BUMPER;
    TJ_Y[i + 20] = d;
    TJ_Y[i + 30] = -d;
    TJ_Y[i + 40] = d;
    TJ_Y[i] = 0.0;
    TJ_Y[i + 10] = 0.0;
  }
  //  DEC Y
  // flag=zeros(15,1);
  x_ini[4] = 0.0;
  for (int track_number{0}; track_number < 64; track_number++) {
    double P_ctrv_out[25];
    double P_cv_out[25];
    double y_out[3];
    double Training_data[2];
    d = Training_data_data[28 * track_number + 5];
    if ((d >= -25.0) && (d <= 25.0)) {
      d1 = Training_data_data[28 * track_number + 6];
      if ((d1 >= -6.0) && (d1 <= 6.0)) {
        flag[track_number] = 1.0;
      } else {
        flag[track_number] = 0.0;
      }
    } else {
      flag[track_number] = 0.0;
    }
    d1 = Training_data_data[28 * track_number + 6];
    y_out[0] = d1;
    y_out[1] = d;
    target_vel_x = Training_data_data[28 * track_number + 10];
    y_out[2] = -target_vel_x;
    Training_data[0] = Training_data_data[28 * track_number + 8];
    Training_data[1] = Training_data_data[28 * track_number + 7];
    x_ini[0] = d1;
    x_ini[1] = d;
    x_ini[2] = -target_vel_x;
    x_ini[3] = -coder::b_norm(Training_data);
    if ((old_flag[track_number] == 0.0) && (flag[track_number] == 1.0)) {
      EGO_CG2_FRONT_BUMPER = 0.8;
      Prob_cv_old = 0.2;
      std::memset(&P_ctrv_old[0], 0, 25U * sizeof(double));
      std::memset(&P_cv_old[0], 0, 25U * sizeof(double));
    } else {
      EGO_CG2_FRONT_BUMPER = old_Prob_ctrv[track_number];
      Prob_cv_old = old_Prob_cv[track_number];
      std::copy(&old_P_ctrv[track_number * 25],
                &old_P_ctrv[static_cast<int>(
                    static_cast<unsigned int>(track_number * 25) + 25U)],
                &P_ctrv_old[0]);
      std::copy(&old_P_cv[track_number * 25],
                &old_P_cv[static_cast<int>(
                    static_cast<unsigned int>(track_number * 25) + 25U)],
                &P_cv_old[0]);
    }
    // zeros(5,1);
    c_ctrv = Interacting(EGO_CG2_FRONT_BUMPER, Prob_cv_old, x_ini, x_ini,
                         P_ctrv_old, P_cv_old, laneInfoR, P_ctrv_out, X_AB,
                         tmp_target_y, P_cv_out);
    if ((d >= -25.0) && (d <= 25.0) && (d1 >= -6.0) && (d1 <= 6.0)) {
      d = old_flag[track_number];
      for (pred_length = 0; pred_length < 10; pred_length++) {
        EGO_CG2_FRONT_BUMPER = (static_cast<double>(pred_length) + 1.0) * 0.2;
        for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 5;
             BEV_Window_out_tmp++) {
          tmp_target_x[BEV_Window_out_tmp] = x_ini[BEV_Window_out_tmp];
        }
        Y_FrontCenter_A_tmp =
            CTRV_MODEL(laneInfoR, P_ctrv_out, y_out, tmp_target_x,
                       flag[track_number], d, EGO_CG2_FRONT_BUMPER, P_ctrv_old);
        for (i = 0; i < 5; i++) {
          for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 5;
               BEV_Window_out_tmp++) {
            Traffic_index = BEV_Window_out_tmp + 5 * i;
            P_ctrv_tmp[Traffic_index + 25 * pred_length] =
                P_ctrv_old[Traffic_index];
          }
          x_cv[i] = x_ini[i];
        }
        double P_c[25];
        mu_cv = CV_MODEL(tmp_target_y, P_cv_out, y_out, x_cv,
                         flag[track_number], d, EGO_CG2_FRONT_BUMPER, P_cv_old);
        std::copy(&P_cv_old[0], &P_cv_old[25], &P_cv_tmp[pred_length * 25]);
        BEV_Window_out_tmp = 5 * pred_length + 50 * track_number;
        EGO_CG2_FRONT_BUMPER =
            Mixing(c_ctrv, tmp_target_x, P_ctrv_old, Y_FrontCenter_A_tmp, X_AB,
                   x_cv, P_cv_old, mu_cv, Prob_cv_old,
                   *(double(*)[5]) & X_pred[BEV_Window_out_tmp], P_c);
        //          [Prob_ctrv,Prob_cv,X_c,P_c] =
        //          Mixing(c_ctrv,x_ctrv,P_ctrv,mu_ctrv,c_cv,x_cv,P_cv,mu_cv);
        if (pred_length + 1 == 1) {
          out_Prob_ctrv[track_number] = EGO_CG2_FRONT_BUMPER;
          out_Prob_cv[track_number] = Prob_cv_old;
        }
        for (iindx = 0; iindx < 5; iindx++) {
          for (i = 0; i < 5; i++) {
            Traffic_index = i + 5 * iindx;
            out_P_ctrv_tmp = Traffic_index + 25 * track_number;
            out_P_ctrv[out_P_ctrv_tmp] = P_ctrv_tmp[Traffic_index];
            out_P_cv[out_P_ctrv_tmp] = P_cv_tmp[Traffic_index];
          }
        }
        //  [state time length_of_pred track_num], state :[y,x,theta,v,w]
        d1 = X_pred[BEV_Window_out_tmp + 1];
        //              ry(index_time,pred_length)=-5;
        X_pred[BEV_Window_out_tmp] -=
            (Lane[0] * rt_powd_snf(d1, 3.0) + Lane[2] * (d1 * d1)) +
            Lane[4] * d1;
      }
    } else {
      for (pred_length = 0; pred_length < 10; pred_length++) {
        for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 5;
             BEV_Window_out_tmp++) {
          X_pred[(BEV_Window_out_tmp + 5 * pred_length) + 50 * track_number] =
              b_iv[BEV_Window_out_tmp];
        }
      }
    }
  }
  //  Threat Assessment
  d = Chassis[5];
  for (int track_number{0}; track_number < 64; track_number++) {
    //  Add Threat Metric to Training Data
    EGO_CG2_FRONT_BUMPER = Training_data_data[28 * track_number + 7];
    target_vel_x = d + EGO_CG2_FRONT_BUMPER;
    //     %% TTC
    //  TTC Calculates time to collision in ROI.
    //
    //  TTC_out = TTC(rel_pos_x, rel_pos_y, rel_vel_x, ROI)
    //  rel_pos_x {double} : Relative longitudinal position (m)
    //  rel_pos_y {double} : Relative lateral position (m)
    //  rel_vel_x {double} : Relative longitudinal velocity (m/s)
    //  TTC_PARAM {struct} : Parameters for calculation of TTC
    //                        TTC_PARAM.ROI.Y_MIN : minimum relative lateral
    //                        position of ROI TTC_PARAM.ROI.Y_MAX : maximum
    //                        relative lateral position of ROI
    //                        TTC_PARAM.ROI.X_MIN : minimum relative
    //                        longitudinal position of ROI TTC_PARAM.ROI.X_MAX :
    //                        maximum relative longitudinal position of ROI
    //                        TTC_PARAM.TTC_MAX   : default value for exception
    if (std::abs(Training_data_data[28 * track_number + 6]) <= 2.0) {
      X_AB = -Training_data_data[28 * track_number + 5] / EGO_CG2_FRONT_BUMPER;
    } else {
      X_AB = 11.0;
    }
    if (X_AB < 0.0) {
      X_AB = 11.0;
    }
    EGO_CG2_FRONT_BUMPER = 1.0 / X_AB;
    if (EGO_CG2_FRONT_BUMPER > 100.0) {
      EGO_CG2_FRONT_BUMPER = 100.0;
    }
    Training_data_data[28 * track_number + 11] = X_AB;
    Training_data_data[28 * track_number + 13] = EGO_CG2_FRONT_BUMPER;
    //     %% TLC
    Y_AB = TLC(Training_data_data[28 * track_number + 6],
               Training_data_data[28 * track_number + 8],
               Training_data_data[28 * track_number + 10],
               Training_data_data[28 * track_number + 3],
               Training_data_data[28 * track_number + 4], Distance_to_Leftlane,
               Distance_to_Rightlane, EGO_CG2_FRONT_BUMPER);
    EGO_CG2_FRONT_BUMPER = 1.0 / Y_AB;
    if (EGO_CG2_FRONT_BUMPER > 100.0) {
      EGO_CG2_FRONT_BUMPER = 100.0;
    }
    Training_data_data[28 * track_number + 12] = Y_AB;
    Training_data_data[28 * track_number + 14] = EGO_CG2_FRONT_BUMPER;
    //     %% Ilat (lateral collision index)
    //  lateral: Ilat(combined and single),DLC and TLC
    //  longitudinal : Ilong,dw,dbr,xp and TTC
    //          I_LAT_PARAM.TTC_INVERSE_THRESHOLD=4;
    //          I_LAT_PARAM.A_X_MAX=-10;
    //          I_LAT_PARAM.A_X_MAX=-1;
    Training_data_data[28 * track_number + 15] =
        I_lat(Training_data_data[28 * track_number + 5],
              Training_data_data[28 * track_number + 6],
              Training_data_data[28 * track_number + 7],
              Training_data_data[28 * track_number + 8], d, target_vel_x,
              Training_data_data[28 * track_number + 10],
              Training_data_data[28 * track_number + 3],
              Training_data_data[28 * track_number + 4],
              Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
              Distance_to_Rightlane, Prob_cv_old, X_AB, Y_FrontCenter_A_tmp,
              mu_cv, c_ctrv, EGO_CG2_FRONT_BUMPER, Y_AB);
    Training_data_data[28 * track_number + 16] = Prob_cv_old;
    //          I_LAT_PARAM.A_X_MAX=-10;
    Training_data_data[28 * track_number + 27] =
        I_lat(Training_data_data[28 * track_number + 5],
              Training_data_data[28 * track_number + 6],
              Training_data_data[28 * track_number + 7],
              Training_data_data[28 * track_number + 8], d, target_vel_x,
              Training_data_data[28 * track_number + 10],
              Training_data_data[28 * track_number + 3],
              Training_data_data[28 * track_number + 4],
              Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
              Distance_to_Rightlane, Prob_cv_old, X_AB, Y_FrontCenter_A_tmp,
              mu_cv, c_ctrv, EGO_CG2_FRONT_BUMPER, Y_AB);
    Training_data_data[28 * track_number + 26] = Prob_cv_old;
  }
  //
  for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 64; BEV_Window_out_tmp++) {
    for (iindx = 0; iindx < 28; iindx++) {
      Tmp_State[18 * iindx + 504 * BEV_Window_out_tmp] =
          Training_data_data[iindx + 28 * BEV_Window_out_tmp];
    }
  }
  //  Output
  x_ini[0] = 6.0 * Lane[0];
  x_ini[1] = 2.0 * Lane[2];
  laneInfoR[0] = 6.0 * Lane[1];
  laneInfoR[1] = 2.0 * Lane[3];
  X_AB = coder::internal::minimum(varargin_1);
  Y_AB = coder::internal::maximum(varargin_1);
  Distance_to_Leftlane = coder::internal::b_minimum(b_varargin_1);
  Distance_to_Rightlane = coder::internal::b_maximum(b_varargin_1);
  coder::meshgrid(varargin_1, b_varargin_1, Rx, Ry);
  for (int track_number{0}; track_number < 64; track_number++) {
    c_ctrv = Tmp_State[504 * track_number + 90];
    if (c_ctrv != 0.0) {
      target_vel_x = Tmp_State[504 * track_number + 108];
      if (target_vel_x != 0.0) {
        double d_varargin_1[255];
        int b_BEV_Window_out_tmp;
        bool a__8[15311];
        bool in_tmp[15311];
        if ((c_ctrv >= -25.0) && (c_ctrv <= 25.0) && (target_vel_x >= -6.0) &&
            (target_vel_x <= 6.0)) {
          //                  Heading_Angle = Tmp_State(Data_Backward_index -
          //                  image_index + 1, 5);
          std::copy(&image[0], &image[275598], &BEV_Window_out[0]);
          for (Traffic_index = 0; Traffic_index < 90; Traffic_index++) {
            BEV_Window_out_tmp = Traffic_index + 504 * track_number;
            d = Tmp_State[BEV_Window_out_tmp + 90];
            if ((d >= X_AB) && (d <= Y_AB)) {
              d = Tmp_State[BEV_Window_out_tmp + 108];
              if ((d >= Distance_to_Leftlane) && (d <= Distance_to_Rightlane)) {
                EGO_CG2_FRONT_BUMPER = Tmp_State[BEV_Window_out_tmp + 270];
                for (int k{0}; k < 255; k++) {
                  d_varargin_1[k] =
                      std::abs(EGO_CG2_FRONT_BUMPER - RANGE_I_LAT_RANGE[k]);
                }
                coder::internal::minimum(d_varargin_1, iindx);
                //              [~,Image_Position_X] =
                //              min(abs(Tmp_State(Data_Backward_index -
                //              image_index + 1,TRAINING.REL_POS_X) -
                //              RANGE.X_RANGE));
                EGO_CG2_FRONT_BUMPER =
                    std::round(Tmp_State[Traffic_index + 90] * -5.02 + 125.5);
                //              [~,Image_Position_Y] =
                //              min(abs(Tmp_State(Data_Backward_index -
                //              image_index + 1,TRAINING.REL_POS_Y) -
                //              RANGE.Y_RANGE));
                Prob_cv_old = std::round(
                    Tmp_State[Traffic_index + 108] * -5.083333333333333 + 30.5);
                if (EGO_CG2_FRONT_BUMPER < 1.0) {
                  EGO_CG2_FRONT_BUMPER = 1.0;
                } else if (EGO_CG2_FRONT_BUMPER > 251.0) {
                  EGO_CG2_FRONT_BUMPER = 251.0;
                }
                if (Prob_cv_old < 1.0) {
                  Prob_cv_old = 1.0;
                } else if (Prob_cv_old > 61.0) {
                  Prob_cv_old = 61.0;
                }
                //  image에 입력할 때 1을 빼는 이유 : 위에서 min함수 이용해서 각
                //  index를 찾으면 1~256으로 나오지만 image에는 0~255 범위로
                //  입력해야하므로 1을 빼준다
                //                  if CHANNEL.Add_Line_to_BEV_Switch
                b_BEV_Window_out_tmp =
                    static_cast<int>(EGO_CG2_FRONT_BUMPER) +
                    251 * (static_cast<int>(Prob_cv_old) - 1);
                BEV_Window_out[b_BEV_Window_out_tmp - 1] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 45932] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 91865] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 137798] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 183731] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 229664] =
                    static_cast<double>(iindx) - 1.0;
                //  R
                BEV_Window_out[b_BEV_Window_out_tmp + 15310] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 61243] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 107176] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 153109] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 199042] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 244975] = 0.0;
                //  G
                BEV_Window_out[b_BEV_Window_out_tmp + 30621] = 0.0;
                //  B
                BEV_Window_out[b_BEV_Window_out_tmp + 76554] = 0.0;
                //  B
                BEV_Window_out[b_BEV_Window_out_tmp + 122487] = 0.0;
                //  B
                BEV_Window_out[b_BEV_Window_out_tmp + 168420] = 0.0;
                //  B
                BEV_Window_out[b_BEV_Window_out_tmp + 214353] = 0.0;
                //  B
                BEV_Window_out[b_BEV_Window_out_tmp + 260286] = 0.0;
                //  B
              }
            }
          }
        }
        if ((!coder::isequal(BEV_Window_out)) && (track_number + 1 == 1)) {
          double c_varargin_1[251];
          double e_varargin_1[61];
          for (Prob_cv_old = 0.0; Prob_cv_old < Lane[8]; Prob_cv_old++) {
            Y_FrontCenter_A_tmp = Prob_cv_old * Lane_Width;
            for (out_P_ctrv_tmp = 0; out_P_ctrv_tmp < 251; out_P_ctrv_tmp++) {
              mu_cv = (((x_ini[0] * b[out_P_ctrv_tmp] +
                         x_ini[1] * b_b[out_P_ctrv_tmp]) +
                        Lane[4] * varargin_1[out_P_ctrv_tmp]) +
                       Lane[6]) +
                      Y_FrontCenter_A_tmp;
              d = b_dv[out_P_ctrv_tmp];
              if ((d >= X_AB) && (d <= Y_AB) &&
                  (mu_cv >= Distance_to_Leftlane) &&
                  (mu_cv <= Distance_to_Rightlane)) {
                for (int k{0}; k < 251; k++) {
                  c_varargin_1[k] =
                      std::abs(b_dv[out_P_ctrv_tmp] - varargin_1[k]);
                }
                coder::internal::b_minimum(c_varargin_1, iindx);
                for (int k{0}; k < 61; k++) {
                  e_varargin_1[k] = std::abs(mu_cv - b_varargin_1[k]);
                }
                coder::internal::c_minimum(e_varargin_1, Traffic_index);
                b_BEV_Window_out_tmp = iindx + 251 * (Traffic_index - 1);
                BEV_Window_out[b_BEV_Window_out_tmp - 1] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 15310] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 30621] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 45932] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 61243] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 76554] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 91865] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 107176] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 122487] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 137798] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 153109] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 168420] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 183731] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 199042] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 214353] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 229664] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 244975] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 260286] = 0.0;
              }
            }
          }
          for (Prob_cv_old = 0.0; Prob_cv_old < Lane[9]; Prob_cv_old++) {
            Y_FrontCenter_A_tmp = Prob_cv_old * Lane_Width;
            for (out_P_ctrv_tmp = 0; out_P_ctrv_tmp < 251; out_P_ctrv_tmp++) {
              mu_cv = (((laneInfoR[0] * b[out_P_ctrv_tmp] +
                         laneInfoR[1] * b_b[out_P_ctrv_tmp]) +
                        Lane[5] * varargin_1[out_P_ctrv_tmp]) +
                       Lane[7]) -
                      Y_FrontCenter_A_tmp;
              d = b_dv[out_P_ctrv_tmp];
              if ((d >= X_AB) && (d <= Y_AB) &&
                  (mu_cv >= Distance_to_Leftlane) &&
                  (mu_cv <= Distance_to_Rightlane)) {
                for (int k{0}; k < 251; k++) {
                  c_varargin_1[k] =
                      std::abs(b_dv[out_P_ctrv_tmp] - varargin_1[k]);
                }
                coder::internal::b_minimum(c_varargin_1, iindx);
                for (int k{0}; k < 61; k++) {
                  e_varargin_1[k] = std::abs(mu_cv - b_varargin_1[k]);
                }
                coder::internal::c_minimum(e_varargin_1, Traffic_index);
                b_BEV_Window_out_tmp = iindx + 251 * (Traffic_index - 1);
                BEV_Window_out[b_BEV_Window_out_tmp - 1] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 15310] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 30621] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 45932] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 61243] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 76554] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 91865] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 107176] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 122487] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 137798] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 153109] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 168420] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 183731] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 199042] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 214353] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 229664] = 0.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 244975] = 255.0;
                BEV_Window_out[b_BEV_Window_out_tmp + 260286] = 0.0;
              }
            }
          }
        }
        //  tic
        if ((!coder::isequal(BEV_Window_out)) && (track_number + 1 == 1)) {
          // && track_number == Traffic_Number
          tmp_target_y[0] = 0.0;
          tmp_target_y[1] = -Chassis[9];
          tmp_target_y[2] = -Chassis[9];
          tmp_target_y[3] = 0.0;
          tmp_target_y[4] = 0.0;
          EGO_CG2_FRONT_BUMPER = -Chassis[10] / 2.0;
          tmp_target_x[0] = EGO_CG2_FRONT_BUMPER;
          tmp_target_x[1] = EGO_CG2_FRONT_BUMPER;
          tmp_target_x[2] = Chassis[10] / 2.0;
          tmp_target_x[3] = Chassis[10] / 2.0;
          tmp_target_x[4] = EGO_CG2_FRONT_BUMPER;
          coder::inpolygon(Rx, Ry, tmp_target_y, tmp_target_x, in_tmp, a__8);
          Traffic_index =
              coder::eml_find(in_tmp, ii_data, jj_data, out_P_ctrv_tmp);
          for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 18;
               BEV_Window_out_tmp++) {
            for (iindx = 0; iindx < Traffic_index; iindx++) {
              for (i = 0; i < out_P_ctrv_tmp; i++) {
                BEV_Window_out[((jj_data[i] + 251 * (ii_data[iindx] - 1)) +
                                15311 * BEV_Window_out_tmp) -
                               1] = 0.0;
              }
            }
          }
        }
        //  toc
        if (!coder::isequal(BEV_Window_out)) {
          d = Tmp_State[504 * track_number + 54];
          EGO_CG2_FRONT_BUMPER = -d / 2.0;
          tmp_target_y[0] = EGO_CG2_FRONT_BUMPER;
          tmp_target_y[1] = EGO_CG2_FRONT_BUMPER;
          tmp_target_y[2] = d / 2.0;
          tmp_target_y[3] = d / 2.0;
          tmp_target_y[4] = EGO_CG2_FRONT_BUMPER;
          tmp_target_x[0] = 0.0;
          d = Tmp_State[504 * track_number + 72];
          tmp_target_x[1] = d;
          tmp_target_x[2] = d;
          tmp_target_x[3] = 0.0;
          tmp_target_x[4] = 0.0;
          d = Tmp_State[504 * track_number + 180];
          EGO_CG2_FRONT_BUMPER = std::cos(d);
          Prob_cv_old = std::sin(d);
          for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 5;
               BEV_Window_out_tmp++) {
            d = tmp_target_x[BEV_Window_out_tmp];
            d1 = tmp_target_y[BEV_Window_out_tmp];
            x_cv[BEV_Window_out_tmp] =
                (d * EGO_CG2_FRONT_BUMPER - d1 * Prob_cv_old) + c_ctrv;
            d = (d * Prob_cv_old + d1 * EGO_CG2_FRONT_BUMPER) + target_vel_x;
            tmp_target_x[BEV_Window_out_tmp] = d;
          }
          coder::inpolygon(Rx, Ry, x_cv, tmp_target_x, in_tmp, a__8);
          Traffic_index =
              coder::eml_find(in_tmp, ii_data, jj_data, out_P_ctrv_tmp);
          EGO_CG2_FRONT_BUMPER = Tmp_State[504 * track_number + 270];
          for (int k{0}; k < 255; k++) {
            d_varargin_1[k] =
                std::abs(EGO_CG2_FRONT_BUMPER - RANGE_I_LAT_RANGE[k]);
          }
          coder::internal::minimum(d_varargin_1, iindx);
          if ((out_P_ctrv_tmp != 0) || (Traffic_index != 0)) {
            for (i = 0; i < out_P_ctrv_tmp; i++) {
              //                      if CHANNEL.Add_Line_to_BEV_Switch
              //                  BEV_Window_out(Image_Position_X(i),Image_Position_Y(i),1)
              //                  = I_LONG_uint8-1; % R
              //                  BEV_Window_out(Image_Position_X(i),Image_Position_Y(i),4)
              //                  = I_LONG_less_uint8-1; % R
              b_BEV_Window_out_tmp =
                  static_cast<int>(static_cast<float>(jj_data[i])) +
                  251 * (static_cast<int>(static_cast<float>(ii_data[i])) - 1);
              BEV_Window_out[b_BEV_Window_out_tmp - 1] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 45932] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 91865] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 137798] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 183731] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 229664] =
                  static_cast<double>(iindx) - 1.0;
              //  R
              BEV_Window_out[b_BEV_Window_out_tmp + 15310] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 61243] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 107176] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 153109] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 199042] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 244975] = 0.0;
              //  G
              BEV_Window_out[b_BEV_Window_out_tmp + 30621] = 0.0;
              //  B
              BEV_Window_out[b_BEV_Window_out_tmp + 76554] = 0.0;
              //  B
              BEV_Window_out[b_BEV_Window_out_tmp + 122487] = 0.0;
              //  B
              BEV_Window_out[b_BEV_Window_out_tmp + 168420] = 0.0;
              //  B
              BEV_Window_out[b_BEV_Window_out_tmp + 214353] = 0.0;
              //  B
              BEV_Window_out[b_BEV_Window_out_tmp + 260286] = 0.0;
              //  B
            }
          }
        }
        //          BEV_Window_out(:,:,1) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,4) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,7) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,10) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,13) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,16) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,19) = BEV_Window_out(:,:,1);
        //          BEV_Window_out(:,:,22) = BEV_Window_out(:,:,1);
        std::memset(&xp1[0], 0, 100U * sizeof(double));
        std::memset(&yp1[0], 0, 100U * sizeof(double));
        std::memset(&xp2[0], 0, 100U * sizeof(double));
        std::memset(&yp2[0], 0, 100U * sizeof(double));
        std::memset(&xp3[0], 0, 100U * sizeof(double));
        std::memset(&yp3[0], 0, 100U * sizeof(double));
        std::memset(&xp4[0], 0, 100U * sizeof(double));
        std::memset(&yp4[0], 0, 100U * sizeof(double));
        //  Number of participants : 4
        //                  tic
        EGO_CG2_FRONT_BUMPER = Tmp_State[504 * track_number + 270];
        for (int k{0}; k < 255; k++) {
          d_varargin_1[k] =
              std::abs(EGO_CG2_FRONT_BUMPER - RANGE_I_LAT_RANGE[k]);
        }
        coder::internal::minimum(d_varargin_1, I_LAT_uint8);
        if (std::abs(static_cast<double>(I_LAT_uint8)) > 255.0) {
          I_LAT_uint8 = 1;
        }
        if ((!coder::isequal(BEV_Window_out)) && (c_ctrv >= -25.0) &&
            (c_ctrv <= 25.0) && (target_vel_x >= -6.0) &&
            (target_vel_x <= 6.0)) {
          Prob_cv_old = std::cos(Tmp_State[180]);
          Y_FrontCenter_A_tmp = std::sin(Tmp_State[180]);
          for (int k{0}; k < 5; k++) {
            double TV_range_y[10];
            double b_tmp_target_x[10];
            double rx2[10];
            double ry2[10];
            int c_BEV_Window_out_tmp;
            //  Number of strategy [ ESL ESR ELCL ELCR ESS]
            //  time,10 sample (prediction sample),[ACC DEC ESL ESR ELCL ELCR
            //  ESS]
            // -predicted_ego_x;
            coder::linspace(-Tmp_State[54] / 2.0, Tmp_State[54] / 2.0, rx2);
            coder::linspace(0.0, Tmp_State[72], b_tmp_target_x);
            for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 10;
                 BEV_Window_out_tmp++) {
              ry2[BEV_Window_out_tmp] =
                  X_pred[5 * BEV_Window_out_tmp + 50 * track_number] -
                  TJ_Y[BEV_Window_out_tmp + 10 * k];
              d = b_tmp_target_x[BEV_Window_out_tmp];
              d1 = rx2[BEV_Window_out_tmp];
              TV_range_y[BEV_Window_out_tmp] =
                  d * Y_FrontCenter_A_tmp + d1 * Prob_cv_old;
              d = d * Prob_cv_old - d1 * Y_FrontCenter_A_tmp;
              b_tmp_target_x[BEV_Window_out_tmp] = d;
            }
            for (i = 0; i < 10; i++) {
              if (i + 1 > 9) {
                EGO_CG2_FRONT_BUMPER = X_pred[50 * track_number + 46];
                d = ry2[9];
                for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 10;
                     BEV_Window_out_tmp++) {
                  xp1[BEV_Window_out_tmp + 90] =
                      b_tmp_target_x[0] + EGO_CG2_FRONT_BUMPER;
                  d1 = TV_range_y[BEV_Window_out_tmp] + ry2[9];
                  yp1[BEV_Window_out_tmp + 90] = d1;
                  xp2[BEV_Window_out_tmp + 90] =
                      b_tmp_target_x[9] + EGO_CG2_FRONT_BUMPER;
                  yp2[BEV_Window_out_tmp + 90] = d1;
                  d1 =
                      b_tmp_target_x[BEV_Window_out_tmp] + EGO_CG2_FRONT_BUMPER;
                  xp3[BEV_Window_out_tmp + 90] = d1;
                  yp3[BEV_Window_out_tmp + 90] = TV_range_y[0] + d;
                  xp4[BEV_Window_out_tmp + 90] = d1;
                  yp4[BEV_Window_out_tmp + 90] = TV_range_y[9] + d;
                }
              } else {
                d = X_pred[(5 * i + 50 * track_number) + 1];
                d1 = ry2[i];
                for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 10;
                     BEV_Window_out_tmp++) {
                  Traffic_index = BEV_Window_out_tmp + 10 * i;
                  xp1[Traffic_index] = d;
                  yp1[Traffic_index] = d1;
                  xp2[Traffic_index] = d;
                  yp2[Traffic_index] = d1;
                  xp3[Traffic_index] = d;
                  yp3[Traffic_index] = d1;
                  xp4[Traffic_index] = d;
                  yp4[Traffic_index] = d1;
                }
              }
            }
            // maximum pixel of X
            // maximum pixel of Y
            // maximum pixel of X
            // minimum pixel of Y
            //          CpX=(CHANNEL.IMAGE_X)/2; % center (0,0)->
            //          (imageX/2,imageY/2) CpY=(CHANNEL.IMAGE_Y)/2; % center
            //          (0,0)-> (imageX/2,imageY/2)
            //  y=> meter ,x=pixel
            //  y=-(range of pixel)/(range of meter)x+(range of pixel)/2
            //  gradient -(range of pixel)/(range of meter)  X
            //  gradient -(range of pixel)/(range of meter)  Y
            //  meter to pixel
            Traffic_index = 3 * (k + 1);
            b_BEV_Window_out_tmp = 15311 * Traffic_index;
            c_BEV_Window_out_tmp = 15311 * (Traffic_index + 1);
            Traffic_index = 15311 * (Traffic_index + 2);
            for (out_P_ctrv_tmp = 0; out_P_ctrv_tmp < 100; out_P_ctrv_tmp++) {
              d = std::round(xp1[out_P_ctrv_tmp] * -5.02 + 125.5);
              d1 = std::round(yp1[out_P_ctrv_tmp] * -5.083333333333333 + 30.5);
              target_vel_x = std::round(xp2[out_P_ctrv_tmp] * -5.02 + 125.5);
              d2 = std::round(yp2[out_P_ctrv_tmp] * -5.083333333333333 + 30.5);
              d3 = std::round(xp3[out_P_ctrv_tmp] * -5.02 + 125.5);
              d4 = std::round(yp3[out_P_ctrv_tmp] * -5.083333333333333 + 30.5);
              d5 = std::round(xp4[out_P_ctrv_tmp] * -5.02 + 125.5);
              d6 = std::round(yp4[out_P_ctrv_tmp] * -5.083333333333333 + 30.5);
              //  box dash * predition sample
              if (d < 1.0) {
                d = 1.0;
              } else if (d > 251.0) {
                d = 251.0;
              }
              if (d1 < 1.0) {
                d1 = 1.0;
              } else if (d1 > 61.0) {
                d1 = 61.0;
              }
              if (target_vel_x < 1.0) {
                target_vel_x = 1.0;
              } else if (target_vel_x > 251.0) {
                target_vel_x = 251.0;
              }
              if (d2 < 1.0) {
                d2 = 1.0;
              } else if (d2 > 61.0) {
                d2 = 61.0;
              }
              if (d3 < 1.0) {
                d3 = 1.0;
              } else if (d3 > 251.0) {
                d3 = 251.0;
              }
              if (d4 < 1.0) {
                d4 = 1.0;
              } else if (d4 > 61.0) {
                d4 = 61.0;
              }
              if (d5 < 1.0) {
                d5 = 1.0;
              } else if (d5 > 251.0) {
                d5 = 251.0;
              }
              if (d6 < 1.0) {
                d6 = 1.0;
              } else if (d6 > 61.0) {
                d6 = 61.0;
              }
              pred_length =
                  static_cast<int>(static_cast<float>(d)) +
                  251 * (static_cast<int>(static_cast<float>(d1)) - 1);
              BEV_Window_out[(pred_length + b_BEV_Window_out_tmp) - 1] =
                  static_cast<double>(I_LAT_uint8) - 1.0;
              //
              iindx = static_cast<int>(static_cast<float>(target_vel_x)) +
                      251 * (static_cast<int>(static_cast<float>(d2)) - 1);
              BEV_Window_out[(iindx + b_BEV_Window_out_tmp) - 1] =
                  static_cast<double>(I_LAT_uint8) - 1.0;
              //
              i = static_cast<int>(static_cast<float>(d3)) +
                  251 * (static_cast<int>(static_cast<float>(d4)) - 1);
              BEV_Window_out[(i + b_BEV_Window_out_tmp) - 1] =
                  static_cast<double>(I_LAT_uint8) - 1.0;
              //
              BEV_Window_out_tmp =
                  static_cast<int>(static_cast<float>(d5)) +
                  251 * (static_cast<int>(static_cast<float>(d6)) - 1);
              BEV_Window_out[(BEV_Window_out_tmp + b_BEV_Window_out_tmp) - 1] =
                  static_cast<double>(I_LAT_uint8) - 1.0;
              //
              BEV_Window_out[(pred_length + c_BEV_Window_out_tmp) - 1] = 0.0;
              //
              BEV_Window_out[(iindx + c_BEV_Window_out_tmp) - 1] = 0.0;
              //
              BEV_Window_out[(i + c_BEV_Window_out_tmp) - 1] = 0.0;
              //
              BEV_Window_out[(BEV_Window_out_tmp + c_BEV_Window_out_tmp) - 1] =
                  0.0;
              //
              BEV_Window_out[(pred_length + Traffic_index) - 1] = 0.0;
              //
              BEV_Window_out[(iindx + Traffic_index) - 1] = 0.0;
              //
              BEV_Window_out[(i + Traffic_index) - 1] = 0.0;
              //
              BEV_Window_out[(BEV_Window_out_tmp + Traffic_index) - 1] = 0.0;
              //
            }
          }
        }
        //                  toc
      }
    }
    std::copy(&BEV_Window_out[0], &BEV_Window_out[275598], &image[0]);
  }
  for (BEV_Window_out_tmp = 0; BEV_Window_out_tmp < 275598;
       BEV_Window_out_tmp++) {
    unsigned char u;
    d = BEV_Window_out[BEV_Window_out_tmp];
    if (d < 256.0) {
      if (d >= 0.0) {
        u = static_cast<unsigned char>(d);
      } else {
        u = 0U;
      }
    } else {
      u = MAX_uint8_T;
    }
    b_BEV_image[BEV_Window_out_tmp] = u;
  }
  std::copy(&Tmp_State[0], &Tmp_State[32256], &State[0]);
}

//
// Arguments    : void
// Return Type  : void
//
void out_Prob_ctrv_not_empty_init()
{
  out_Prob_ctrv_not_empty = false;
}

//
// File trailer for BEV_image.cpp
//
// [EOF]
//
